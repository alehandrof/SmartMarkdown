[
	{ "keys": ["tab"], "command": "smart_folding", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "markup.heading.markdown" }
		]
	},
	{ "keys": ["super+a"], "command": "global_folding", "context":
	  	[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
		]
	},
	{ "keys": ["enter"], "command": "smart_list", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*([-+\\**\\>\\|%]+|[(]?\\d+[.)]+)\\s+" }
		]
	},
	{ "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/SmartMarkdown/Add Line with Smart List.sublime-macro"}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*([-+\\**\\>\\|%]+|[(]?\\d+[.)]+)\\s+" }
		]
	},
	{ "keys": ["enter"], "command": "smart_list", "context":
		[
		    { "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "selector", "operator": "equal", "operand": "markup.list" }
		]
	},
	{ "keys": ["tab"], "command": "smart_table",
	  "args": {"forward": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*(\\||\\+[-=])",
			  "match_all": true}
		]
	},
	{ "keys": ["tab"], "command": "smart_table",
	  "args": {"forward": true}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*" },
			{ "key": "following_text", "operator": "regex_contains", "operand": "\\s*(\\||\\+[-=])",
			  "match_all": true}
		]
	},
	{ "keys": ["shift+tab"], "command": "smart_table",
	  "args": {"forward": false}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*(\\||\\+[-=])",
			  "match_all": true}
		]
	},
	{ "keys": ["shift+tab"], "command": "smart_table",
	  "args": {"forward": false}, "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*" },
			{ "key": "following_text", "operator": "regex_contains", "operand": "\\s*(\\||\\+[-=])",
			  "match_all": true}
		]
	},
	{
		"keys": ["super+shift+."], "command": "change_heading_level",
		"args": {"up": true}, "context":
			[
				{"key": "selector", "operator": "equal", "operand": "text.html.markdown"}
			]
	},
	{
		"keys": ["super+shift+,"], "command": "change_heading_level",
		"args": {"up": false}, "context":
			[
				{"key": "selector", "operator": "equal", "operand": "text.html.markdown"}
			]
	},
	{ "keys": ["tab"], "command": "indent", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*([-\\+\\*]|#\\.|(\\d+|[A-z]|[IVXLCDM]+|[ivxlcdm]+)[\\.\\)]|\\((\\d+|[A-z]|[IVXLCDM]+|[ivxlcdm]+)\\)|\\(\\@[\\w\\-]*\\))\\s+" }
		]
	},
	{ "keys": ["shift+tab"], "command": "unindent", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*([-\\+\\*]|#\\.|(\\d+|[A-z]|[IVXLCDM]+|[ivxlcdm]+)[\\.\\)]|\\((\\d+|[A-z]|[IVXLCDM]+|[ivxlcdm]+)\\)|\\(\\@[\\w\\-]*\\))\\s+" }
			// Should we enable the following setting check?
			// { "key": "setting.shift_tab_unindent", "operator": "equal", "operand": true }
		]
	}
]
